name: 🪡 Changeset (Version Management)

on:
  push:
    branches:
      - 'develop'

  # remove after test
  workflow_dispatch:

jobs:
  changeset_handler:
    name: Changeset handler
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: write
    outputs:
      version_updated: ${{ steps.changeset-status.outputs.updated }}
      new_version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache dependencies
        if: ${{ steps.changeset-status.outputs.skip != 'true' }}
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: ${{ steps.changeset-status.outputs.skip != 'true' }}
        run: |
          npm ci

      - name: Changeset status
        id: changeset-status
        shell: bash
        run: |
          # Default skip state
          skip="false"
          updated="false"
          # Changeset artifacts
          changesetArtifactsRegex="\.changeset/.*\.md$"
          # Commit hash that triggered workflow
          commitHash="${{ github.sha }}"

          pendingChangesetList=$(find .changeset -type f -name "*.md" ! -name "README.md")

          if [[ -n "$pendingChangesetList" ]]; then
            echo "✅ There are pending changeset files:"
            echo "$pendingChangesetList"
            
            # If changeset files found, don't skip
            if echo "$pendingChangesetList" | grep -qE "$changesetArtifactsRegex"; then
              echo "✅ Changeset found!"
              updated="true"
              skip="false"
            fi
          else
            echo "⚠️ No pending changeset files found"
            skip="true"
          fi

          echo "skip=$skip" >> "$GITHUB_OUTPUT"
          echo "updated=$updated" >> "$GITHUB_OUTPUT"

      - name: Set version
        if: ${{ steps.changeset-status.outputs.skip != 'true' }}
        run: |
          npx changeset version
          git status --short

      - name: Update lockfile
        if: ${{ steps.changeset-status.outputs.skip != 'true' }}
        run: |
          npm install --package-lock-only

          if git diff --quiet package-lock.json; then
            echo "🤖 No changes to lockfile"
          else
            echo "✅ Lockfile was updated"
          fi

      - name: Commit changes
        if: ${{ steps.changeset-status.outputs.skip != 'true' }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          if ! git add -A; then
            echo "👹 Oops! Failed stage changes"
            exit 1
          fi

          echo "✅ Staged all changes!"

          pkgVersion=$(node -p "require('./package.json').version")
          if ! git commit \
            --allow-empty \
            --no-verify \
            -m "[skip ci] 🦖 updated package version to $pkgVersion"; then
            echo "👹 Oops! Failed to commit package version."
            exit 1
          fi

          echo "✅ Committed package version!"

          if ! git push; then
            echo "👹 Oops! Failed to push changes."
            exit 1
          fi

          echo "✅ Pushed changes to repository!"

      - name: Get version
        id: get-version
        if: ${{ steps.changeset-status.outputs.skip != 'true' }}
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Version detected: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
